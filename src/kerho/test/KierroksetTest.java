package kerho.test;
// Generated by ComTest BEGIN
import kerho.*;
import java.io.File;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2023.04.16 16:49:58 // Generated by ComTest
 *
 */
@SuppressWarnings("all")
public class KierroksetTest {



  // Generated by ComTest BEGIN
  /** testLisaa52 */
  @Test
  public void testLisaa52() {    // Kierrokset: 52
    Kierrokset kierrokset = new Kierrokset(); 
    Kierros k1 = new Kierros(), k2 = new Kierros(); 
    assertEquals("From: Kierrokset line: 55", 0, kierrokset.getLkm()); 
    kierrokset.lisaa(k1); assertEquals("From: Kierrokset line: 56", 1, kierrokset.getLkm()); 
    kierrokset.lisaa(k2); assertEquals("From: Kierrokset line: 57", 2, kierrokset.getLkm()); 
    kierrokset.lisaa(k1); assertEquals("From: Kierrokset line: 58", 3, kierrokset.getLkm()); 
    kierrokset.lisaa(k1); assertEquals("From: Kierrokset line: 59", 4, kierrokset.getLkm()); 
    kierrokset.lisaa(k1); assertEquals("From: Kierrokset line: 60", 5, kierrokset.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa76 
   * @throws SailoException when error
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testKorvaaTaiLisaa76() throws SailoException,CloneNotSupportedException {    // Kierrokset: 76
    Kierrokset kierrokset = new Kierrokset(); 
    Kierros har1 = new Kierros(), har2 = new Kierros(); 
    har1.rekisteroi(); har2.rekisteroi(); 
    assertEquals("From: Kierrokset line: 82", 0, kierrokset.getLkm()); 
    kierrokset.korvaaTaiLisaa(har1); assertEquals("From: Kierrokset line: 83", 1, kierrokset.getLkm()); 
    kierrokset.korvaaTaiLisaa(har2); assertEquals("From: Kierrokset line: 84", 2, kierrokset.getLkm()); 
    Kierros har3 = har1.clone(); 
    har3.aseta(2,"kkk"); 
    Iterator<Kierros> i2=kierrokset.iterator(); 
    assertEquals("From: Kierrokset line: 88", har1, i2.next()); 
    kierrokset.korvaaTaiLisaa(har3); assertEquals("From: Kierrokset line: 89", 2, kierrokset.getLkm()); 
    i2=kierrokset.iterator(); 
    Kierros h = i2.next(); 
    assertEquals("From: Kierrokset line: 92", har3, h); 
    assertEquals("From: Kierrokset line: 93", true, h == har3); 
    assertEquals("From: Kierrokset line: 94", false, h == har1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testPoista115 */
  @Test
  public void testPoista115() {    // Kierrokset: 115
    Kierrokset kierrokset = new Kierrokset(); 
    Kierros k1 = new Kierros(); k1.vastaaKierros(2); 
    Kierros k2 = new Kierros(); k2.vastaaKierros(1); 
    Kierros k3 = new Kierros(); k3.vastaaKierros(2); 
    kierrokset.lisaa(k1); 
    assertEquals("From: Kierrokset line: 122", true, kierrokset.poista(k1)); 
    assertEquals("From: Kierrokset line: 123", false, kierrokset.poista(k2)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testPoistaPelaajanKierrokset138 */
  @Test
  public void testPoistaPelaajanKierrokset138() {    // Kierrokset: 138
    Kierrokset kierrokset = new Kierrokset(); 
    Kierros pitsi21 = new Kierros(); pitsi21.vastaaKierros(2); 
    Kierros pitsi11 = new Kierros(); pitsi11.vastaaKierros(1); 
    Kierros pitsi22 = new Kierros(); pitsi22.vastaaKierros(2); 
    Kierros pitsi12 = new Kierros(); pitsi12.vastaaKierros(1); 
    Kierros pitsi23 = new Kierros(); pitsi23.vastaaKierros(2); 
    kierrokset.lisaa(pitsi21); 
    kierrokset.lisaa(pitsi11); 
    kierrokset.lisaa(pitsi22); 
    kierrokset.lisaa(pitsi12); 
    kierrokset.lisaa(pitsi23); 
    assertEquals("From: Kierrokset line: 150", 3, kierrokset.poistaPelaajanKierrokset(2)); assertEquals("From: Kierrokset line: 150", 2, kierrokset.getLkm()); 
    assertEquals("From: Kierrokset line: 151", 0, kierrokset.poistaPelaajanKierrokset(3)); assertEquals("From: Kierrokset line: 151", 2, kierrokset.getLkm()); 
    List<Kierros> h = kierrokset.annaKierrokset(2); 
    assertEquals("From: Kierrokset line: 153", 0, h.size()); 
    h = kierrokset.annaKierrokset(1); 
    assertEquals("From: Kierrokset line: 155", pitsi11, h.get(0)); 
    assertEquals("From: Kierrokset line: 156", pitsi12, h.get(1)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta178 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta178() throws SailoException {    // Kierrokset: 178
    Kierrokset kierrokset = new Kierrokset(); 
    Kierros k1 = new Kierros(); k1.vastaaKierros(2); 
    Kierros k2 = new Kierros(); k2.vastaaKierros(1); 
    Kierros k3 = new Kierros(); k3.vastaaKierros(2); 
    Kierros k4 = new Kierros(); k4.vastaaKierros(1); 
    Kierros k5 = new Kierros(); k5.vastaaKierros(2); 
    String tiedNimi = "koeKerho"; 
    File ftied = new File(tiedNimi + ".dat"); 
    ftied.delete(); 
    kierrokset.lueTiedostosta(tiedNimi); 
    kierrokset.lisaa(k1); 
    kierrokset.lisaa(k2); 
    kierrokset.lisaa(k3); 
    kierrokset.lisaa(k4); 
    kierrokset.lisaa(k5); 
    kierrokset.tallenna(); 
    kierrokset = new Kierrokset(); 
    kierrokset.lueTiedostosta(tiedNimi); 
    Iterator<Kierros> i = kierrokset.iterator(); 
    assertEquals("From: Kierrokset line: 200", k1.toString(), i.next().toString()); 
    assertEquals("From: Kierrokset line: 201", k2.toString(), i.next().toString()); 
    assertEquals("From: Kierrokset line: 202", k3.toString(), i.next().toString()); 
    assertEquals("From: Kierrokset line: 203", k4.toString(), i.next().toString()); 
    assertEquals("From: Kierrokset line: 204", k5.toString(), i.next().toString()); 
    assertEquals("From: Kierrokset line: 205", false, i.hasNext()); 
    kierrokset.lisaa(k5); 
    kierrokset.tallenna(); 
    assertEquals("From: Kierrokset line: 208", true, ftied.delete()); 
    File fbak = new File(tiedNimi+".bak"); 
    assertEquals("From: Kierrokset line: 210", true, fbak.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testIterator330 */
  @Test
  public void testIterator330() {    // Kierrokset: 330
    Kierrokset kierrokset = new Kierrokset(); 
    Kierros pitsi21 = new Kierros(2); kierrokset.lisaa(pitsi21); 
    Kierros pitsi11 = new Kierros(1); kierrokset.lisaa(pitsi11); 
    Kierros pitsi22 = new Kierros(2); kierrokset.lisaa(pitsi22); 
    Kierros pitsi12 = new Kierros(1); kierrokset.lisaa(pitsi12); 
    Kierros pitsi23 = new Kierros(2); kierrokset.lisaa(pitsi23); 
    Iterator<Kierros> i2=kierrokset.iterator(); 
    assertEquals("From: Kierrokset line: 342", pitsi21, i2.next()); 
    assertEquals("From: Kierrokset line: 343", pitsi11, i2.next()); 
    assertEquals("From: Kierrokset line: 344", pitsi22, i2.next()); 
    assertEquals("From: Kierrokset line: 345", pitsi12, i2.next()); 
    assertEquals("From: Kierrokset line: 346", pitsi23, i2.next()); 
    try {
    assertEquals("From: Kierrokset line: 347", pitsi12, i2.next()); 
    fail("Kierrokset: 347 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
    int n = 0; 
    int jnrot[] = { 2,1,2,1,2} ; 
    for ( Kierros har:kierrokset ) {
    assertEquals("From: Kierrokset line: 353", jnrot[n], har.getPelaajaNro()); n++; 
    }
    assertEquals("From: Kierrokset line: 356", 5, n); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaKierrokset371 */
  @Test
  public void testAnnaKierrokset371() {    // Kierrokset: 371
    Kierrokset kierrokset = new Kierrokset(); 
    Kierros k21 = new Kierros(2); kierrokset.lisaa(k21); 
    Kierros k11 = new Kierros(1); kierrokset.lisaa(k11); 
    Kierros k22 = new Kierros(2); kierrokset.lisaa(k22); 
    Kierros k12 = new Kierros(1); kierrokset.lisaa(k12); 
    Kierros k23 = new Kierros(2); kierrokset.lisaa(k23); 
    Kierros k51 = new Kierros(5); kierrokset.lisaa(k51); 
    List<Kierros> loytyneet; 
    loytyneet = kierrokset.annaKierrokset(3); 
    assertEquals("From: Kierrokset line: 384", 0, loytyneet.size()); 
    loytyneet = kierrokset.annaKierrokset(1); 
    assertEquals("From: Kierrokset line: 386", 2, loytyneet.size()); 
    assertEquals("From: Kierrokset line: 387", true, loytyneet.get(0) == k11); 
    assertEquals("From: Kierrokset line: 388", true, loytyneet.get(1) == k12); 
    loytyneet = kierrokset.annaKierrokset(5); 
    assertEquals("From: Kierrokset line: 390", 1, loytyneet.size()); 
    assertEquals("From: Kierrokset line: 391", true, loytyneet.get(0) == k51); 
  } // Generated by ComTest END
}